Task 1.

Написать функцию, которая найдет и выведет в консоль юзеров, зарегистрированных 09.10.2021 и 10.10.2021). Массив в task1.txt

Task 2*

Откройте в VSCode task2.json файл. Скопируйте из него JSONку, вставьте в свой код (присвоив в переменную).

Дан массив объектов. Каждый объект является идентификационной карточкой человека. Нам нужно хранить только уникальные значения в этом массиве. Реализуйте функцию, которая будет выполнять эту работу.

Task 2*** Реализуйте считывание из JSONки из файла task2.json с помощью, например, модуля fs. для дальнейшего использования в функции, описанной в задании

Task 3**
В файле task3.txt найдете структуру компании и задания, необходимые выполнить.

Примечание: ВСЕ задания выполнять не обязательно, если вам люто сложно. Но ПЕРВОЕ - прям надо всем:)

Task 4****

В файле task4.txt вы найдете разноуровневый массив объектов. Очень похожий на массив из 3го задания, только количество вложенностей может быть не ограничено. 

Задание: написать функцию: 

Функция строит древовидный список компании.
При ее вызове в консоль должен вывестись список подразделений компании с указанием количества сотрудников и с соблюдение вложенности подразделений.


ssh-keygen -t rsa -C "githubuser”


Я смотрю по домашке есть распространенная ошибка в 3 задании, что данный массив - это максимум данных. Но нет, это именно СТРУКТУРА JSON, предприятий и вложенных отделов может быть в 100 раз больше. Потому функции должны быть такие, чтобы им пофигу было на количество:) ПОсему вооружаемся файндом, форычем и мапом, и вперед:)

И маленькая подсказка: там много у вас будет кода одинакового в функциях, подумайте как можно его выносить в отдельные функции-помощники








https://learning.postman.com/docs/writing-scripts/script-references/test-examples/#asserting-a-value-type

http://162.55.220.72:5005/get_test_user

/s34lfgbj/Vadim/jjd909/12242kjkWpqc322823r23r3r457271evny




let item_1 = "Alex"

pm.test("Item_1 Test", function () {

    pm.expect(item_1).to.deep.equal("Alex")
    // pm.expect(tt2.salary).to.eql(1000);
});

pm.test("Item_2 Person", function () {

    pm.expect(+person.age).to.deep.equal(30)
 
});




const jsonData = pm.response.json();



let pers11on = {
    "age": "30",
    "family": {
        "children": [["Alex",24],["Kate",12]],
        "u_salary_1_5_year": 4000
    },
    "name": "Vadim",
    "salary": 1000
}


let item_1 = "Alex"

pm.test("Item_1 Test", function () {

    pm.expect(item_1).to.deep.equal("Alex")
    // pm.expect(tt2.salary).to.eql(1000);
});

pm.test("Item_2 Person", function () {

    pm.expect(+person.age).to.deep.equal(30)
 
});

pm.test("Item_3 Person", function () {
    pm.expect(person.family.children[1][1]).to.deep.equal(12)
});

pm.test("Item_4 Person", function () {
    pm.expect(person).to.have.property("name")
});


pm.test("Item_5 Person", function () {
    pm.expect(person).to.deep.include({"salary": 1000})
});

pm.test("Item_6 Person", function () {
    pm.expect(person.family.children[1]).to.deep.include("Kate")
});

pm.test("Item_7 Person", function () {
    pm.expect(person.name).to.be.a("String")
});

pm.test("Item_8 Person", function () {
    pm.expect(person.family.children[0]).to.eql(["Alex",24])
});





https://www.chaijs.com/api/bdd/




