https://learning.postman.com/docs/writing-scripts/script-references/test-examples/#asserting-a-value-type

http://162.55.220.72:5005/get_test_user

/s34lfgbj/Vadim/jjd909/12242kjkWpqc322823r23r3r457271evny




let item_1 = "Alex"

pm.test("Item_1 Test", function () {

    pm.expect(item_1).to.deep.equal("Alex")
    // pm.expect(tt2.salary).to.eql(1000);
});

pm.test("Item_2 Person", function () {

    pm.expect(+person.age).to.deep.equal(30)
 
});




const jsonData = pm.response.json();



let pers11on = {
    "age": "30",
    "family": {
        "children": [["Alex",24],["Kate",12]],
        "u_salary_1_5_year": 4000
    },
    "name": "Vadim",
    "salary": 1000
}


let item_1 = "Alex"

pm.test("Item_1 Test", function () {

    pm.expect(item_1).to.deep.equal("Alex")
    // pm.expect(tt2.salary).to.eql(1000);
});

pm.test("Item_2 Person", function () {

    pm.expect(+person.age).to.deep.equal(30)
 
});

pm.test("Item_3 Person", function () {
    pm.expect(person.family.children[1][1]).to.deep.equal(12)
});

pm.test("Item_4 Person", function () {
    pm.expect(person).to.have.property("name")
});


pm.test("Item_5 Person", function () {
    pm.expect(person).to.deep.include({"salary": 1000})
});

pm.test("Item_6 Person", function () {
    pm.expect(person.family.children[1]).to.deep.include("Kate")
});

pm.test("Item_7 Person", function () {
    pm.expect(person.name).to.be.a("String")
});

pm.test("Item_8 Person", function () {
    pm.expect(person.family.children[0]).to.eql(["Alex",24])
});





https://www.chaijs.com/api/bdd/




